#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-task-control-handlers - grading script for DO407
#
# SYNOPSIS
#     lab-task-control-handlers {setup|grade|cleanup|solve|reset}
#
#        setup   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        solve   - do the lab exercise for the student (may call setup)
#        reset   - avoid resetting a machine (not preferred)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for the lab for managing handlers.
#
# CHANGELOG
#   * Tue May 17 2016 George Hacker <ghacker@redhat.com>
#   - lab_cleanup no longer removes the student's work
#   - lab_setup provides student with a working config and inventory
#   - changed pkg parameter for yum module to name
#   * Tue May  3 2016 George Hacker <ghacker@redhat.com>
#   - corrected value of ${ansible_playbook_file}
#   - changed print_SUCCESS calls to print_PASS in lab_grade
#   * Thu Apr 14 2016 Razique Mahroua <rmahroua@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
runuser='runuser student -c'

control_node='workstation'

# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi

working_dir="/home/student/${env}-handlers"
ansible_cfg_file=${working_dir}/ansible.cfg
ansible_hst_file=${working_dir}/inventory
ansible_playbook_file=${working_dir}/configure_db.yml
ansible_db_file=http://materials.example.com/task_control
ansible_user=devops
ansible_target=servera.lab.example.com
ansible_pkgs=(mariadb-server)

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup grade cleanup solve reset)

function lab_setup {

  reqd_package='ansible'
  host_reachable ${control_node}
  echo
  echo "Setting up ${control_node} for lab exercise work:"
  echo

  pad " · ${reqd_package} package is installed"
  if ! rpm -q --quiet ${reqd_package}
  then
    print_FAIL
  else
    print_SUCCESS
    if [[ ! -d ${working_dir} ]]
    then
      pad " · Creating the working directory"
      mkdir -p ${working_dir}
      cat << EOF >> ${ansible_cfg_file}
[defaults]
inventory   = ${ansible_hst_file##*/}
remote_user = ${ansible_user}

[privilege_escalation]
become      = true
EOF
      cat << EOF >> ${ansible_hst_file}
[databases]
${ansible_target}
EOF
      chown -R student ${working_dir}
      print_SUCCESS
    fi
  fi

  echo
}

function lab_grade {

  host_reachable ${ansible_target}
  echo
  echo "Grading the student's work on ${control_node}:"
  echo

  pad " · Ensuring install_db.yml is present"
  if [[ -f ${ansible_playbook_file} ]]; then
    print_PASS
  else
    print_FAIL
  fi

  echo
  echo "Grading the student's work on ${ansible_target}:"
  echo

  echo " · Checking packages"
  for i in "${ansible_pkgs[@]}"; do
    pad "   · Checking $i"
    if ${ssh} ${ansible_target} rpm -q "$i" &> /dev/null; then
      print_PASS
    else
      print_FAIL
    fi
  done

  cmd1='rpm -q mariadb-server'
  if ${ssh} ${ansible_target} "${cmd1}" &> /dev/null
  then
    pad " · Ensuring MySQL is running"
    if ${ssh} ${ansible_target} "systemctl is-active mariadb" &>/dev/null
    then
      print_PASS
      pad " · Ensuring the administrative password has been set"
      if ${ssh} ${ansible_target} "mysql -u root -predhat -e 'show databases'" &>/dev/null
      then
        print_PASS
      else
        print_FAIL
      fi
    else
      print_FAIL
    fi
  fi
  pad  " · Ensuring /etc/my.cnf exists"
  if ${ssh} ${ansible_target} grep -q Ansible /etc/my.cnf &>/dev/null; then
    print_PASS
  else
    print_FAIL
  fi

  # Overall grade
  echo
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  echo
}

function lab_cleanup {

  host_reachable ${ansible_target}
  echo
  echo "Cleaning up the lab on ${ansible_target}:"
  echo

  echo " · Removing packages"
  for i in "${ansible_pkgs[@]}"; do
    pad "   · Removing $i"
    if ${ssh} ${ansible_target} yum -y remove "$i" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  done

  pad  " · Removing  /etc/my.cnf"
  if ${ssh} ${ansible_target} 'rm -f /etc/my.cnf' &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

function lab_solve {

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${control_node}:"
  echo

  cd ${working_dir}
  pad " · Creating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: databases
  vars:
    db_packages:
      - mariadb-server
      - MySQL-python
    db_service: mariadb
    src_file: "http://materials.example.com/task_control/my.cnf.template"
    dst_file: /etc/my.cnf

  tasks:
    - name: Install {{ db_packages }} package
      yum:
        name: "{{ item }}"
        state: latest
      with_items: "{{ db_packages }}"
      notify:
        - start_service
    - name: Download and install {{ dst_file }}
      get_url:
        url: "{{ src_file }}"
        dest: "{{ dst_file }}"
        owner: mysql
        group: mysql
        force: yes
      notify:
        - restart_service
        - set_password

  handlers:
    - name: start_service
      service:
        name: "{{ db_service }}"
        state: started

    - name: restart_service
      service:
        name: "{{ db_service }}"
        state: restarted

    - name: set_password
      mysql_user:
        name: root
        password: redhat
EOF

  if [[ -f ${ansible_playbook_file} ]]; then
    print_SUCCESS

    chown -R student ${working_dir}
    cd ${working_dir}

    pad " · Running the playbook"
    if ${runuser} "ansible-playbook ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " · Updating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: databases
  vars:
    db_packages:
      - mariadb-server
      - MySQL-python
    db_service: mariadb
    src_file: "http://materials.example.com/task_control/my.cnf.template"
    dst_file: /etc/my.cnf

  tasks:
    - name: Install {{ db_packages }} package
      yum:
        name: "{{ item }}"
        state: latest
      with_items: "{{ db_packages }}"
      notify:
        - start_service
    - name: Download and install {{ dst_file }}
      get_url:
        url: "{{ src_file }}"
        dest: "{{ dst_file }}"
        owner: mysql
        group: mysql
        force: yes
      notify:
        - restart_service
        - set_password

    - name: set_password
      mysql_user:
        name: root
        password: redhat

  handlers:
    - name: start_service
      service:
        name: "{{ db_service }}"
        state: started

    - name: restart_service
      service:
        name: "{{ db_service }}"
        state: restarted

    - name: set_password
      mysql_user:
        name: root
        password: redhat
EOF
  if [[ -f ${ansible_playbook_file} ]]; then
    print_SUCCESS
    pad " · Running the playbook"
    if ! ${runuser} "ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  echo
}

function lab_reset {

  lab_cleanup

  echo
  echo "Resetting the lab on ${control_node}:"
  echo

  pad " · Removing the working directory"
  if rm -rf ${working_dir}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
