#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     demo-manage-variables-playbook - grading script for DO407
#
# SYNOPSIS
#     demo-manage-variables-playbook {setup|grade|cleanup|solve|reset}
#
#        setup   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        solve   - do the lab exercise for the student (may call setup)
#        reset   - avoid resetting a machine (not preferred)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for the lab for managing variables in playbooks.
#
# CHANGELOG
#   * Mon May 16 2016 George Hacker <ghacker@redhat.com>
#   - playbook now checks web content from localhost
#   - removed loops from playbook
#   - lab_cleanup no longer removes the student's work
#   - lab_setup provides student work a working config and inventory
#   - changed pkg parameter for yum module to name
#   * Tue Apr 05 2016 Razique Mahroua <rmahroua@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'

control_node='workstation'

# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi

working_dir="/home/student/${env}_variables-playbook"
ansible_cfg_file=${working_dir}/ansible.cfg
ansible_hst_file=${working_dir}/inventory
ansible_playbook_file=${working_dir}/playbook.yml
ansible_user=devops
ansible_target=servera.lab.example.com
ansible_pkgs=(httpd mariadb-server screen mutt)

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup grade cleanup solve reset)

function lab_setup {

  reqd_package='ansible'
  host_reachable ${control_node}
  echo
  echo "Setting up ${control_node} for lab exercise work:"
  echo

  pad " · ${reqd_package} package is installed on ${control_node}"
  if ! rpm -q --quiet ${reqd_package}
  then
    print_FAIL
  else
    print_SUCCESS
    if [[ ! -d ${working_dir} ]]
    then
      pad " · Creating the working directory"
      mkdir -p ${working_dir}
      cat << EOF >> ${ansible_cfg_file}
[defaults]
inventory   = ${ansible_hst_file##*/}
remote_user = ${ansible_user}

[privilege_escalation]
become      = true
EOF
      cat << EOF >> ${ansible_hst_file}
[webservers]
${ansible_target}

[dbservers]
${ansible_target}

[servers:children]
webservers
dbservers

[servers:vars]
ansible_user=devops
ansible_become=yes
package=httpd
EOF
      chown -R student. ${working_dir}
      print_SUCCESS
    fi
  fi

  echo
}

function lab_grade {

  echo
  echo "Nothing to grade as it is a demonstration"
  echo

}

function lab_cleanup {

  host_reachable ${ansible_target}
  echo
  echo "Cleaning up the lab on ${control_node}:"
  echo

  echo "Removing packages"
  for i in "${ansible_pkgs[@]}"; do
    pad " . Removing $i"
    if ${ssh} ${ansible_target} yum -y remove "$i" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  done

  echo
}

function lab_solve {

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${control_node}:"
  echo

#  pad " . Creating ${ansible_cfg_file}"
#  cat > ${ansible_cfg_file} << EOF
#[defaults]
#inventory = ${ansible_hst_file}
#EOF
#  if stat ${ansible_cfg_file} &>/dev/null; then
#    print_SUCCESS
#  else
#    print_FAIL
#  fi

  pad " . Creating ${ansible_hst_file}"
  cat > ${ansible_hst_file} << EOF
[webservers]
${ansible_target}

[dbservers]
${ansible_target}

[servers:children]
webservers
dbservers

[servers:vars]
ansible_user=devops
ansible_become=yes
package=httpd
EOF
  if stat ${ansible_hst_file} &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " . Creating ${ansible_playbook_file}"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: all
  tasks:
    - name: Installs the {{ package }} package
      yum:
        name: "{{ package }}"
        state: latest
EOF
  if stat ${ansible_playbook_file} &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi

  chown -R student. ${working_dir}
  pad " . Running the playbook"
  if ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file} &>/dev/null; then
    print_SUCCESS
    pad " . Ensuring httpd has been installed"
    if ${ssh} ${ansible_target} "rpm -qa httpd" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi
  pad " . Updating ${ansible_hst_file}"
  cat > ${ansible_hst_file} << EOF
[webservers]
${ansible_target}

[dbservers]
${ansible_target}

[dbservers:vars]
package=mariadb-server

[servers:children]
webservers
dbservers

[servers:vars]
ansible_user=devops
ansible_become=yes
package=httpd
EOF
  if stat ${ansible_hst_file} &>/dev/null; then
    print_SUCCESS
    pad " . Running the playbook"
    if ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file} &>/dev/null; then
      print_SUCCESS
      pad " . Ensuring mariadb-server has been installed"
      if ${ssh} ${ansible_target} "rpm -qa mariadb-server" &>/dev/null; then
        print_SUCCESS
      else
        print_FAIL
      fi
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " . Updating ${ansible_hst_file}"
  cat > ${ansible_hst_file} << EOF
[webservers]
${ansible_target} package=screen

[dbservers]
${ansible_target}

[dbservers:vars]
package=mariadb-server

[servers:children]
webservers
dbservers

[servers:vars]
ansible_user=devops
ansible_become=yes
package=httpd
EOF
  if stat ${ansible_hst_file} &>/dev/null; then
    print_SUCCESS
    pad " . Running the playbook"
    if ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file} &>/dev/null; then
      print_SUCCESS
      pad " . Ensuring screen has been installed"
      if ${ssh} ${ansible_target} "rpm -qa screen" &>/dev/null; then
        print_SUCCESS
      else
        print_FAIL
      fi
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " . Running the playbook with extra variable"
  if ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file} -e "package=mutt" &>/dev/null; then
    print_SUCCESS
    pad " . Ensuring mutt has been installed"
    if ${ssh} ${ansible_target} "rpm -qa mutt" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi
}

function lab_reset {

  lab_cleanup

  echo "Resetting the lab on ${control_node}:"
  echo

  pad " · Removing the working directory"
  if rm -rf ${working_dir}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
