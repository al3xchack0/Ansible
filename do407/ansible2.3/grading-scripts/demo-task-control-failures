#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     demo-task-control-failures - grading script for DO407
#
# SYNOPSIS
#     demo-task-control-failures {setup|cleanup|solve|reset}
#
#        setup   - prepare the system for starting the lab
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        solve   - do the lab exercise for the student (may call setup)
#        reset   - avoid resetting a machine (not preferred)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for the lab for managing failures.
#
# CHANGELOG
#   * Wed May 18 2016 George Hacker <ghacker@redhat.com>
#   - lab_cleanup no longer removes the student's work
#   - lab_setup provides a working config, inventory, and playbooks
#   - changed pkg parameter for yum module to name
#   * Wed Apr 20 2016 Razique Mahroua <rmahroua@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
runuser='runuser student -c'

control_node='workstation'

# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi

working_dir="/home/student/${env}-failures"
ansible_cfg_file=${working_dir}/ansible.cfg
ansible_hst_file=${working_dir}/inventory
ansible_playbook_file=${working_dir}/playbook.yml
ansible_user=devops
ansible_target=servera.lab.example.com
ansible_pkgs=(postfix dovecot)

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup cleanup solve reset)

function lab_setup {

  reqd_package='ansible'
  host_reachable ${control_node}
  echo
  echo "Setting up ${control_node} for lab exercise work:"
  echo

  pad " · ${reqd_package} package is installed on ${control_node}"
  if ! rpm -q --quiet ${reqd_package}
  then
    print_FAIL
  else
    print_SUCCESS
    if [[ ! -d ${working_dir} ]]
    then
      pad " · Creating the working directory"
      mkdir -p ${working_dir}
      cat << EOF >> ${ansible_cfg_file}
[defaults]
inventory   = ${ansible_hst_file##*/}
remote_user = ${ansible_user}

[privilege_escalation]
become      = true
EOF
      cat << EOF >> ${ansible_hst_file}
[mailservers]
${ansible_target}
EOF
      print_SUCCESS
      pad " . Creating the playbook"
      cat > ${ansible_playbook_file} << EOF
---
- hosts: mailservers
  vars:
    maildir_path: /home/john/Maildir
    maildir: /home/student/Maildir
    mail_package: postfix
    mail_service: postfix

  tasks:
    - name: Create {{ maildir_path }}
      copy:
        src: "{{ maildir }}"
        dest: "{{ maildir_path }}"
        mode: 0755

    - name: Install {{ mail_package }} package
      yum:
        name: "{{ mail_package }}"
        state: latest
EOF
      print_SUCCESS
    fi
  fi
  chown -R student. ${working_dir}

  echo
}

function lab_cleanup {

  host_reachable ${ansible_target}
  echo
  echo "Cleaning up the lab on ${ansible_target}:"
  echo

  echo " · Removing packages"
  for i in ${ansible_pkgs[@]}; do
    pad "   · Removing $i"
    if ${ssh} ${ansible_target} yum -y remove "$i" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  done

  echo
}


function lab_solve {

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${control_node}:"
  echo

  if [[ -f ${ansible_playbook_file} ]]; then
    pad " . Ensuring the play fails"
    if ! ${runuser} "ansible-playbook ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " . Updating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: mailservers
  vars:
    maildir_path: /home/john/Maildir
    maildir: /home/student/Maildir
    mail_package: postfix
    mail_service: postfix

  tasks:
    - name: Create {{ maildir_path }}
      copy:
        src: "{{ maildir }}"
        dest: "{{ maildir_path }}"
        mode: 0755
      ignore_errors: yes

    - name: Install {{ mail_package }} package
      yum:
        name: "{{ mail_package }}"
        state: latest
EOF
  if [[ -f ${ansible_playbook_file} ]]; then
    print_SUCCESS
    pad " . Running the playbook"
    if ${runuser} "ansible-playbook ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " . Updating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: mailservers
  vars:
    maildir_path: /home/john/Maildir
    maildir: /home/student/Maildir
    mail_package: postfix
    mail_service: postfix

  tasks:
    - block:
      - name: Create {{ maildir_path }}
        copy:
          src: "{{ maildir }}"
          dest: "{{ maildir_path }}"
          mode: 0755

      rescue:
      - name: Install mail packages
        yum:
          name: "{{ item }}"
          state: latest
        with_items:
          - "{{ mail_package }}"
          - dovecot

      always:
      - name: Start mail services
        service:
          name: "{{ item }}"
          state: started
        with_items:
          - "{{ mail_service }}"
          - dovecot
        register: command_result

    - debug:
        var: command_result
EOF
 if [[ -f ${ansible_playbook_file} ]]; then
    print_SUCCESS
    pad " . Running the playbook"
    if ${runuser} "ansible-playbook ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " . Updating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: mailservers
  vars:
    maildir_path: /home/john/Maildir
    maildir: /home/student/Maildir
    mail_package: postfix
    mail_service: postfix

  tasks:
    - block:
      - name: Create {{ maildir_path }}
        copy:
          src: "{{ maildir }}"
          dest: "{{ maildir_path }}"
          mode: 0755
        register: command_output

      rescue:
      - name: Install mail packages
        yum:
          name: "{{ item }}"
          state: latest
        with_items:
          - "{{ mail_package }}"
          - dovecot
        changed_when: "'not find' in command_output.msg"
        notify: restart_dovecot

      always:
      - name: Start mail services
        service:
          name: "{{ mail_service }}"
          state: started
        register: command_result

    - debug:
        var: command_result

  handlers:
    - name: restart_dovecot
      service:
        name: dovecot
        state: restarted
EOF
  if [[ -f ${ansible_playbook_file} ]]; then
    print_SUCCESS
    pad " . Running the playbook"
    if ${runuser} "ansible-playbook ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  echo
}

function lab_reset {

  lab_cleanup

  echo "Resetting the lab on ${control_node}:"
  echo

  pad " . Removing the working directory"
  if rm -rf ${working_dir}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
