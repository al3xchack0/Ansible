#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-deploy-dynamic - grading script for DO407 Managing Dynamic
#                          Inventory Guided Exercise (Chapter 2)
#
# SYNOPSIS
#     lab-deploy-dynamic setup
#
#        setup   - prepare the system for starting the lab
#
# DESCRIPTION
#     This script's setup verb installs ansible package in workstation
#
# CHANGELOG
#   * Tue Apr 29 2016 Adolfo Vazquez <avr@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'

target='workstation'

reqd_package='ansible'

lab_dir='/home/student/dep-dynamic'

# Conditional to make the script compatible with the
# demo version.

if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup)

function lab_setup {

  echo
  echo "Setting up ${target} for lab exercise work:"
  echo
  host_reachable ${target}

  if ! rpm -q --quiet ${reqd_package}
  then
    pad " · Installing ${reqd_package} package on ${target}"
    if yum -y install ansible &>/dev/null; then
        print_SUCCESS
    else
        print_FAIL
    fi
  else
    pad " · The ${reqd_package} package is already installed on ${target}"
    print_SUCCESS
  fi

  if ! rpm -q --quiet ${reqd_package}
  then
    pad " · Installing ${reqd_package} package on ${target}"
    if yum -y install ansible &>/dev/null; then
        print_SUCCESS
    else
        print_FAIL
    fi
  else
    pad " · The ${reqd_package} package is already installed on ${target}"
    print_SUCCESS
  fi


  pad " · Create exercise directory"
  cmd1="mkdir ${lab_dir}"
  if su - student -c "${ssh} ${target} '${cmd1}'" &> /dev/null
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

function lab_grade {

  echo
  echo "Grading the student's work on ${target}:"
  echo
  host_reachable ${target}

  # Overall grade
  echo
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  echo
}

function lab_cleanup {

  echo
  echo "Cleaning up the lab on ${target}:"
  echo
  host_reachable ${target}

  print_SUCCESS

}


function lab_solve {

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${target}:"
  echo

  print_SUCCESS

}

function lab_reset {

  echo
  echo "Resetting the lab on ${target}:"
  echo
  host_reachable ${target}

  print_SUCCESS

}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
