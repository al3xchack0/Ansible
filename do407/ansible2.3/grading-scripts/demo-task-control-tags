#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     demo-task-control-tags - grading script for DO407
#
# SYNOPSIS
#     demo-task-control-tags {setup|cleanup|solve|reset}
#
#        setup   - create project directory with files for demo
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        solve   - run the playbooks and display the servera MOTDs
#        reset   - avoid resetting a machine (not preferred)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for the lab for managing tags.
#
# CHANGELOG
#   * Tue May 17 2016 George Hacker <ghacker@redhat.com>
#   - lab_cleanup no longer removes the student's work
#   - lab_setup provides a working config, inventory, and playbooks
#   - changed pkg parameter for yum module to name
#   * Fri Apr 15 2016 Razique Mahroua <rmahroua@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
runuser='runuser student -c'

control_node='workstation'

# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi

working_dir="/home/student/${env}-tags"
ansible_cfg_file=${working_dir}/ansible.cfg
ansible_hst_file=${working_dir}/inventory
ansible_task_file=${working_dir}/prepare_db.yml
ansible_playbook_file=${working_dir}/playbook.yml
ansible_db_file=http://materials.example.com/task_control
ansible_user=devops
ansible_target=servera.lab.example.com
ansible_pkgs=(mariadb-server)

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup cleanup solve reset)

function lab_setup {

  reqd_package='ansible'
  host_reachable ${control_node}
  echo
  echo "Setting up ${control_node} for lab exercise work:"
  echo

  pad " · ${reqd_package} package is installed on ${control_node}"
  if ! rpm -q --quiet ${reqd_package}
  then
    print_FAIL
  else
    print_SUCCESS
    if [[ ! -d ${working_dir} ]]
    then
      pad " · Creating the working directory"
      mkdir -p ${working_dir}
      cat << EOF >> ${ansible_cfg_file}
[defaults]
inventory   = ${ansible_hst_file##*/}
remote_user = ${ansible_user}

[privilege_escalation]
become      = true
EOF
      cat << EOF >> ${ansible_hst_file}
[databases]
${ansible_target}
EOF
      print_SUCCESS
      pad " · Creating the task file"
      cat > ${ansible_task_file} << EOF
---
- name: Install database packages
  yum:
    name: "{{ item }}"
    state: latest
  with_items: "{{ db_packages }}"
  tags:
    - dev
  notify:
    - start_db

- name: Get small config file
  get_url:
    url: "{{ db_config_src_path_small }}"
    dest: "{{ db_config_path }}"
  when: db_config_src_path_small is defined
  notify:
    - restart_db
  tags:
    - dev

- name: Get large config file
  get_url:
    url: "{{ db_config_src_path_large }}"
    dest: "{{ db_config_path }}"
  when: db_config_src_path_large is defined
  notify:
    - restart_db
  tags:
    - prod

- name: Update motd for development
  copy:
    content: "This is a development server"
    dest: /etc/motd
  tags:
    - dev

- name: Update motd for production
  copy:
    content: "This is a production server"
    dest: /etc/motd
  tags:
    - prod
EOF
      print_SUCCESS
      pad " · Creating the playbook"
      cat > ${ansible_playbook_file} << EOF
---
- hosts: all
  vars:
    db_packages:
      - mariadb-server
      - MySQL-python
    db_config_url: http://materials.example.com/task_control
    db_config_src_path_small: "{{ db_config_url }}/my.cnf.small"
    db_config_src_path_large: "{{ db_config_url }}/my.cnf.large"
    db_config_path: /etc/my.cnf
    db_service: mariadb

  tasks:
  - include:
      prepare_db.yml
    when: inventory_hostname in groups['databases']

  handlers:
  - name: start_db
    service:
      name: "{{ db_service }}"
      state: started

  - name: restart_db
    service:
      name: "{{ db_service }}"
      state: restarted
EOF
      print_SUCCESS
      chown -R student ${working_dir}
    fi
  fi

  echo
}

function lab_cleanup {

  host_reachable ${ansible_target}
  echo
  echo "Cleaning up the lab on ${ansible_target}:"
  echo

  echo " · Removing packages"
  for i in "${ansible_pkgs[@]}"; do
    pad "   · Removing $i"
    if ${ssh} ${ansible_target} yum -y remove "$i" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  done
  pad " · Removing /etc/my.cnf"
  if ${ssh} ${ansible_target} "rm -f /etc/my.cnf" &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi
  pad " · Clearing /etc/motd"
  if ${ssh} ${ansible_target} "> /etc/motd" &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

function lab_solve {

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${control_node}:"
  echo

  if [[ -f ${ansible_task_file} ]]; then
    cd ${working_dir}
    pad " · Running the playbook (applying dev)"
    if ${runuser} "ansible-playbook ${ansible_playbook_file} --tags 'dev'" &>/dev/null; then
      print_SUCCESS
      echo "Checking the MOTD on ${ansible_target}"
      ${ssh} ${ansible_target} "cat /etc/motd"
    else
      print_FAIL
    fi
    pad " · Running the playbook (skipping dev)"
    if ${runuser} "ansible-playbook ${ansible_playbook_file} --skip-tags 'dev'" &>/dev/null; then
      print_SUCCESS
      echo "Checking the MOTD on ${ansible_target}"
      ${ssh} ${ansible_target} "cat /etc/motd"
    else
      print_FAIL
    fi
  fi

  echo
}

function lab_reset {

  lab_cleanup

  echo "Resetting the lab on ${control_node}:"
  echo

  pad " · Removing the working directory"
  if rm -rf ${working_dir}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
