#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     demo-task-control-flowcontrol - grading script for DO407
#
# SYNOPSIS
#     demo-task-control-flowcontrol {setup|cleanup|solve|reset}
#
#        setup   - prepare the system for starting the lab
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        solve   - do the lab exercise for the student (may call setup)
#        reset   - avoid resetting a machine (not preferred)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for the lab for managing flow control.
#
# CHANGELOG
#   * Tue May 17 2016 George Hacker <ghacker@redhat.com>
#   - lab_cleanup no longer removes the student's work
#   - lab_setup provides student with a working config and inventory
#   - changed pkg parameter for yum module to name
#   * Thu Apr 07 2016 Razique Mahroua <rmahroua@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
runuser='runuser student -c'

control_node='workstation'

# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="lab"
fi

working_dir="/home/student/${env}-flowcontrol"
ansible_cfg_file=${working_dir}/ansible.cfg
ansible_hst_file=${working_dir}/inventory
ansible_playbook_file=${working_dir}/playbook.yml
ansible_user=devops
ansible_target=servera.lab.example.com
ansible_pkgs=(mariadb-server httpd)

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup cleanup solve reset)

function lab_setup {

  reqd_package='ansible'
  host_reachable ${control_node}
  echo
  echo "Setting up ${control_node} for lab exercise work:"
  echo

  pad " · ${reqd_package} package is installed"
  if ! rpm -q --quiet ${reqd_package}
  then
    print_FAIL
  else
    print_SUCCESS
    if [[ ! -d ${working_dir} ]]
    then
      pad " · Creating the working directory"
      mkdir -p ${working_dir}
      cat << EOF >> ${ansible_cfg_file}
[defaults]
inventory   = ${ansible_hst_file##*/}
remote_user = ${ansible_user}

[privilege_escalation]
become      = true
EOF
      cat << EOF >> ${ansible_hst_file}
[webservers]
${ansible_target}

[databases]
${ansible_target}
EOF
      print_SUCCESS

      pad " · Creating the playbook "
      cat > ${ansible_playbook_file} << EOF
---
- hosts: all
  vars:
    web_package: httpd
    web_service: httpd
    db_package: mariadb-server
    db_service: mariadb
    users:
      - db_admin
      - db_user

  tasks:
    - yum:
        name: "{{ web_package }}"
        state: latest

    - service:
        name: "{{ web_service }}"
        state: started
EOF
      chown -R student ${working_dir}
      print_SUCCESS
    fi
  fi

  echo
}

function lab_cleanup {

  host_reachable ${ansible_target}
  echo
  echo "Cleaning up the lab on ${ansible_target}:"
  echo

  echo " · Removing packages"
  for i in "${ansible_pkgs[@]}"; do
    pad "   · Removing $i"
    if ${ssh} ${ansible_target} yum -y remove "$i" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  done

  echo
}


function lab_solve {
  lab_setup

  echo
  echo "Solving the lab on ${control_node}:"
  echo

  pad " . Creating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: all
  vars:
    web_package: httpd
    web_service: httpd
    db_package: mariadb-server
    db_service: mariadb
    users:
      - db_admin
      - db_user

  tasks:
    - yum:
        name: "{{ web_package }}"
        state: latest
    - service:
        name: "{{ web_service }}"
        state: started
EOF

  if stat ${ansible_playbook_file} &>/dev/null; then
    print_SUCCESS
    pad " . Running the playbook"
    chown -R student. ${working_dir}
    if ${runuser} "ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
      pad " . Retrieving facts on ${ansible_target}"
      cd ${working_dir}
      ansible ${ansible_target} -m setup -a 'filter=ansible_memory_mb'
      sleep 10;
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " . Updating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: all
  vars:
    web_package: httpd
    web_service: httpd
    db_package: mariadb-server
    db_service: mariadb
    users:
      - db_admin
      - db_user

  tasks:
    - yum:
        name: "{{ web_package }}"
        state: latest
    - service:
        name: "{{ web_service }}"
        state: started
    - yum:
        name: "{{ db_package }}"
      when: ansible_memory_mb.real.total >= 256
EOF

  if stat ${ansible_playbook_file} &>/dev/null; then
    print_SUCCESS
    chown -R student. ${working_dir}
    pad " . Running the playbook"
    if ${runuser} "ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
      pad " . Removing mariadb-server "
      if ssh -tt devops@${ansible_target} "sudo yum -y remove mariadb-server" &>/dev/null; then
        print_SUCCESS
      else
        print_FAIL
      fi
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " . Updating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: all
  vars:
    web_package: httpd
    web_service: httpd
    db_package: mariadb-server
    db_service: mariadb
    users:
      - db_admin
      - db_user

  tasks:
    - yum:
        name: "{{ web_package }}"
        state: latest
    - service:
        name: "{{ web_service }}"
        state: started
    - yum:
        name: "{{ db_package }}"
      when: ansible_memory_mb.real.total >= 256 and ansible_system_vendor == "Red Hat"
EOF
  if stat ${ansible_playbook_file} &>/dev/null; then
    print_SUCCESS
    pad " . Running the playbook"
    chown -R student. ${working_dir}
    if ${runuser} "ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
      pad " . Removing mariadb-server "
      if ssh -tt devops@${ansible_target} "sudo yum -y remove mariadb-server" &>/dev/null; then
        print_SUCCESS
      else
        print_FAIL
      fi
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " . Updating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: all
  vars:
    web_package: httpd
    web_service: httpd
    db_package: mariadb-server
    db_service: mariadb
    users:
      - db_admin
      - db_user

  tasks:
    - yum:
        name: "{{ web_package }}"
        state: latest
    - service:
        name: "{{ web_service }}"
        state: started
    - yum:
        name: "{{ db_package }}"
      when: inventory_hostname in groups['databases'] and ansible_memory_mb.real.total >= 256 and ansible_system_vendor == "Red Hat"
EOF
  if stat ${ansible_playbook_file} &>/dev/null; then
    print_SUCCESS
    chown -R student. ${working_dir}
    pad " . Running the playbook"
    if ${runuser} "ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " . Updating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: all
  vars:
    web_package: httpd
    web_service: httpd
    db_package: mariadb-server
    db_service: mariadb
    users:
      - db_admin
      - db_user

  tasks:
    - yum:
        name: "{{ web_package }}"
        state: latest
    - service:
        name: "{{ web_service }}"
        state: started
    - yum:
        name: "{{ db_package }}"
      when: inventory_hostname in groups['databases'] and ansible_memory_mb.real.total >= 256 and ansible_system_vendor == "Red Hat"
    - shell:
        cmd: if yum list installed {{ db_package }} &>/dev/null; then echo 1; else echo 0; fi
      register: command_result
    - user:
        name: "{{ item }}"
      with_items: "{{ users }}"
EOF
  if stat ${ansible_playbook_file} &>/dev/null; then
    print_SUCCESS
    chown -R student. ${working_dir}
    pad " . Running the playbook"
    if ${runuser} "ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
      pad " . Ensuring users have been created"
      if ${ssh} devops@${ansible_target} grep -q db_ /etc/passwd; then
        print_SUCCESS
      else
        print_FAIL
      fi
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  pad " . Updating the playbook"
  cat > ${ansible_playbook_file} << EOF
---
- hosts: all
  vars:
    web_package: httpd
    web_service: httpd
    db_package: mariadb-server
    db_service: mariadb
    users:
      - db_admin
      - db_user

  tasks:
    - yum:
        name: "{{ web_package }}"
        state: latest
    - service:
        name: "{{ web_service }}"
        state: started
    - yum:
        name: "{{ db_package }}"
      when: inventory_hostname in groups['databases'] and ansible_memory_mb.real.total >= 256 and ansible_system_vendor == "Red Hat"
    - shell:
        cmd: if yum list installed {{ db_package }} &>/dev/null; then echo 1; else echo 0; fi
      register: command_result
    - user:
        name: "{{ item }}"
      with_items: "{{ users }}"
    - shell:
        cmd: grep db_ /etc/passwd
      register: users_exist
    - user:
        name: "{{ item }}"
        state: absent
        remove: yes
      when: users_exist.stdout.find('db_admin') != -1
      with_items: "{{ users }}"
EOF
  if stat ${ansible_playbook_file} &>/dev/null; then
    print_SUCCESS
    chown -R student. ${working_dir}
    pad " . Running the playbook"
    if ${runuser} "ansible-playbook -i ${ansible_hst_file} ${ansible_playbook_file}" &>/dev/null; then
      print_SUCCESS
      pad " . Ensuring users have been removed"
      if ! ${ssh} devops@${ansible_target} grep -q db_ /etc/passwd; then
        print_SUCCESS
      else
        print_FAIL
      fi
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  echo
}

function lab_reset {

  lab_cleanup

  echo
  echo "Resetting the lab on ${control_node}:"
  echo

  pad " · Removing the working directory"
  if rm -rf ${working_dir}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
