#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-ansible-galaxy - grading script for DO407 roles practice exercise
#
# SYNOPSIS
#     lab-ansible-galaxy {setup|grade|solve|cleanup|reset}
#
#        setup   - create working directory with inventory and templates
#        grade   - perform lab evaluation steps
#        solve   - do the lab exercise for the student
#        cleanup - remove changes applied to managed hosts
#        reset   - same as cleanup + remove Ansible files on workstation
#
# DESCRIPTION
#     This script is used to confirm if a student has created a file
#     to use with ansible-galaxy to download and install a role. A
#     playbook should exist that applies the role to servera. Finally,
#     the student should have used ansible-galaxy to create an empty
#     role for their own future development.
#
# CHANGELOG
#   * Mon Jun 26 2017 Artur Glogowski <aglogows@redhat.com>
#   - removed patch/restore of ansible-galaxy
#   - added fix for missing directories in ansible-galaxy skeleton
#   - added check for subdirectories in roles directory
#   * Wed May 18 2016 George Hacker <ghacker@redhat.com>
#   - lab_setup provides student with a working config and inventory
#   * Thu May  5 2016 George Hacker <ghacker@redhat.com>
#   - added code to patch/restore ansible-galaxy
#   * Fri Apr 15 2016 George Hacker <ghacker@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
runuser='runuser student -c'

control_node='workstation'

# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi

working_dir="/home/student/${env}-roles"
ansible_cfg_file="${working_dir}/ansible.cfg"
ansible_hst_file="${working_dir}/inventory"
ansible_playbook_file="${working_dir}/use-bash_env-role.yml"
install_roles_file="${working_dir}/install-roles.yml"
ansible_user='devops'
ansible_target='servera.lab.example.com'

materials='http://materials.example.com'
role_src='roles-library/student.bash_env.tgz'

declare -a valid_commands=(setup grade solve cleanup reset)

function lab_setup {

  reqd_package='ansible'
  host_reachable ${control_node}
  echo
  echo "Setting up ${control_node} for lab exercise work:"
  echo

  pad " · ${reqd_package} package is installed"
  if rpm -q --quiet ${reqd_package}
  then
    print_SUCCESS
    if [[ ! -d ${working_dir} ]]
    then
      pad " · Creating the working directory"
      ${runuser} "mkdir -p ${working_dir}"
      ${runuser} "cat >> ${ansible_cfg_file}" << EOF
[defaults]
inventory   = ${ansible_hst_file##*/}
remote_user = ${ansible_user}

[privilege_escalation]
become      = true
EOF
      ${runuser} "cat >> ${ansible_hst_file}" << EOF
[webservers]
${ansible_target}
EOF
      print_SUCCESS
    fi
  else
    print_FAIL
  fi

 # patch_ansible_galaxy

  pad " . Creating files directory"
  if [[ ! -d /usr/lib/python2.7/site-packages/ansible/galaxy/data/default/files ]]
  then
    mkdir /usr/lib/python2.7/site-packages/ansible/galaxy/data/default/files
    print_SUCCESS || print_FAIL
  else
    print_SUCCESS
  fi

  pad " . Creating templates directory"
  if [[ ! -d /usr/lib/python2.7/site-packages/ansible/galaxy/data/default/templates ]]
  then
    mkdir /usr/lib/python2.7/site-packages/ansible/galaxy/data/default/templates
    print_SUCCESS || print_FAIL
  else
    print_SUCCESS
  fi

  pad " . Checking roles subdirectory"
  if [[ ! -d ${working_dir}/roles ]]
  then
    mkdir ${working_dir}/roles
    print_SUCCESS || print_FAIL
  else
    print_SUCCESS
  fi

  pad " . Checking myfirewall subdirectory"
  if [[ ! -d ${working_dir}/roles/myfirewall ]]
  then
    mkdir ${working_dir}/roles/myfirewall
    print_SUCCESS || print_FAIL
  else
    print_SUCCESS
  fi

  pad " . Checking myvhost subdirectory"
  if [[ ! -d ${working_dir}/roles/myvhost ]]
  then
    mkdir ${working_dir}/roles/myvhost
    print_SUCCESS || print_FAIL
  else
    print_SUCCESS
  fi

  chown student:student -R ${working_dir}

}

function lab_grade {

  lab_cleanup

  host_reachable ${control_node}
  echo
  echo "Grading the student's work on ${control_node}:"
  echo

  pad " · Changing into working directory"
  if cd ${working_dir} &> /dev/null
  then
    print_SUCCESS
    pad " · ${install_roles_file##*/} exists"
    cmd1="[[ -f ${install_roles_file} ]]"
    if ${runuser} "${cmd1}" &> /dev/null
    then
      print_PASS
      pad " · Using ansible-galaxy install on ${install_roles_file##*/}"
      cmd1="ansible-galaxy install -p roles -r ${install_roles_file}"
      if ${runuser} "${cmd1}" &> /dev/null
      then
        print_PASS
        pad " · ${ansible_playbook_file##*/} playbook exists"
        cmd1="[[ -f ${ansible_playbook_file} ]]"
        if ${runuser} "${cmd1}" &> /dev/null
        then
          print_PASS
          pad ' · Running playbook'
          cmd1="ansible-playbook ${ansible_playbook_file}"
          if ${runuser} "${cmd1}" &> /dev/null
          then
            print_PASS
          else
            print_FAIL
          fi
        else
          print_FAIL
        fi
      else
        print_FAIL
      fi
    else
      print_FAIL
    fi
    pad ' · empty.example role exists'
    cmd1='[[ -f roles/empty.example/tasks/main.yml ]]'
    if ${runuser} "${cmd1}" &> /dev/null
    then
      print_PASS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  # Overall grade
  echo
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  echo
}

function lab_cleanup {

  host_reachable ${ansible_target}
  echo
  echo "Cleaning up after student.bash_env role on ${ansible_target%%.*}:"
  echo

  pad ' · Restoring /etc/skel files'
  cmd1='rm -f /etc/skel/{.bash_profile,.bashrc,.vimrc}'
  cmd2='yum -y reinstall bash'
  if ${ssh} ${ansible_target} "${cmd1} && ${cmd2}" &> /dev/null
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

function lab_solve {

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${control_node}:"
  echo

  pad " · Changing into working directory"
  if cd ${working_dir} &> /dev/null
  then
    print_SUCCESS
    pad " · Creating ${install_roles_file##*/}"
    cat << EOF > /tmp/tmpfile
---
# ${install_roles_file##*/}

- src: ${materials}/${role_src}
  name: student.bash_env
EOF
    cmd1="cat > ${install_roles_file}"
    if cat /tmp/tmpfile | ${runuser} "${cmd1}" &> /dev/null
    then
      print_SUCCESS
      pad " · Using ansible-galaxy install on ${install_roles_file##*/}"
      cmd1="ansible-galaxy install -p roles -r ${install_roles_file}"
      if ${runuser} "${cmd1}" &> /dev/null
      then
	print_SUCCESS
	pad " · Creating ${ansible_playbook_file##*/} playbook"
	cat <<\EOF > /tmp/tmpfile
---
- name: use student.bash_env role playbook
  hosts: webservers
  user: devops
  become: true

  roles:
    - student.bash_env
EOF
	cmd1="cat > ${ansible_playbook_file}"
	if cat /tmp/tmpfile | ${runuser} "${cmd1}" &> /dev/null
	then
	  print_SUCCESS
	  pad " · Running playbook"
	  cmd1="ansible-playbook ${ansible_playbook_file}"
	  if ${runuser} "${cmd1}" &> /dev/null
	  then
	    print_SUCCESS
	  else
	    print_FAIL
	  fi
	else
	  print_FAIL
	fi
      else
	print_FAIL
      fi
    else
      print_FAIL
    fi
    pad ' · Creating empty.example role'
    cmd1='ansible-galaxy init -p roles empty.example'
    if ${runuser} "${cmd1}" &> /dev/null
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

  echo
}

function lab_reset {

  lab_cleanup

  echo
  echo "Resetting the lab on ${control_node}:"
  echo

  pad " · Changing into working directory"
  if cd ${working_dir} &> /dev/null
  then
    print_SUCCESS
    pad " · Removing the lab files"
    cmd1="rm -f ${install_roles_file} ${ansible_playbook_file}"
    cmd2="rm -rf roles/{empty.example,student.bash_env}"
    if ${runuser} "${cmd1} && ${cmd2}" &> /dev/null
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    print_FAIL
  fi

 # patch_ansible_galaxy --reverse

  echo
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
