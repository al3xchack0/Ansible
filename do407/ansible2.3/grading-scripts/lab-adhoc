#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-adhoc - grading script for DO407 adhoc practice
#
# SYNOPSIS
#     lab-adhoc {setup|grade|cleanup|solve|reset}
#
#        grade   - perform evaluation steps on the system
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        solve   - do the lab exercise for the student (may call setup)
#        reset   - avoid resetting a machine (not preferred)
#        (ONLY INCLUDE PROVIDED COMMANDS, REMOVE REST)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for the particular lab of awesomeness.
#
# CHANGELOG
#   * Mon May 16 2016 Chen Chang <cchang@redhat.com>
#   - Changes to accomodate new directory structure.
#   * Mon May  2 2016 George Hacker <ghacker@redhat.com>
#   - Changed print_SUCCESS to print_PASS in lab_grade function
#   * Sun Apr  3 12:51:14 EDT 2016 Chen Chang <cchang@redhat.com>
#   - New script

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
targetw='workstation'
targeta='servera'
targetb='serverb'

labname=adhoc
lab_dir='/home/student/dep-adhoc'
lab_cfg="${lab_dir}/ansible.cfg"
lab_inv="${lab_dir}/inventory"

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup solve grade cleanup reset)

function lab_setup {

  control_node=${targetw}
  target=${targetw}

  # Check for lab prerequisites (perhaps a required package?).

  reqd_package='ansible'

  echo
  echo "Setting up ${control_node} for lab exercise work:"
  echo
  host_reachable ${control_node}

  pad " · ${reqd_package} package is installed on ${control_node}"
  if rpm -q --quiet ${reqd_package}
  then
    print_SUCCESS
  else
    if yum install -y ${reqd_package} &> /dev/null
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  pad " · Create exercise directory"
  cmd1="mkdir ${lab_dir}"
  if su - student -c "${ssh} ${target} '${cmd1}'" &> /dev/null
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Create Ansible configuration"
  cmd1="curl http://materials.example.com/grading/${lab_cfg} > ${lab_cfg}"
  if su - student -c "${ssh} ${target} '${cmd1}'" &> /dev/null
  then
    print_SUCCESS
  else
    print_FAIL
  fi 

  pad " · Create Ansible inventory"
  cmd1="curl http://materials.example.com/grading/${lab_inv} > ${lab_inv}"
  if su - student -c "${ssh} ${target} '${cmd1}'" &> /dev/null
  then
    print_SUCCESS
  else
    print_FAIL
  fi 

  echo

}

function lab_solve {

  target=${targetw}

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${target}:"
  echo


  pad ' · Executing ad hoc command'

  cmd1="ansible -i ${lab_inv} localhost,servera.lab.example.com -m shell -a 'echo \\\"Managed by Ansible\\\" > /etc/motd' -u devops -b --become-user root"

  if su - student -c "${ssh} ${target} \"${cmd1}\"" &> /dev/null
  then
    print_SUCCESS
  else
    print_FAIL
  fi


  echo

}

function lab_grade {

  target=${targetw}

  echo
  echo "Grading the student's work on ${target}:"
  echo

  # Put in the steps to grade the lab (use print_PASS or print_FAIL)


  pad " · Verify /etc/motd"

  cmd1="diff <(ansible -i ${lab_inv} everyone -m shell -a 'cat /etc/motd' -u devops -o | sort) <(curl http://materials.example.com/grading/motd_output_everyone)"
  
  if su - student -c "${ssh} ${target} \"${cmd1}\"" &> /dev/null
  then
    print_PASS
  else
    print_FAIL
  fi


  # Overall grade
  echo
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  echo
}

function lab_cleanup {

  target=${targetw}

  echo
  echo "Cleaning up the lab on ${targetw}:"
  echo


  pad ' · Restore /etc/motd'

  cmd1="ansible -i ${lab_inv} localhost,servera.lab.example.com -m shell -a '> /etc/motd' -u devops -b --become-user root"

  su -  student -c "${ssh} ${target} \"${cmd1}\"" &> /dev/null
  print_SUCCESS


  echo
}


function lab_reset {

  target=${targetw}

  echo
  echo "Resetting the lab on ${targetw}:"
  echo


  pad ' · Restore /etc/motd'

  cmd1="ansible -i ${lab_inv} localhost,servera.lab.example.com -m shell -a '> /etc/motd' -u devops -b --become-user root"

  su - student -c "${ssh} ${target} \"${cmd1}\"" &> /dev/null
  print_SUCCESS


  pad ' · Remove exercise directory'

  cmd1="rm -rf ${lab_dir}"

  su - student -c "${ssh} ${target} \"${cmd1}\"" &> /dev/null
  print_SUCCESS

  echo
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
