#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     demo-troubleshoot-controlnode - grading script for DO407 Troubleshooting the Ansible Control Node Demonstration (Chapter 10)
#
# SYNOPSIS
#     demo-troubleshoot-controlnode {setup|grade|cleanup|solve|reset}
#
#        setup   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        solve   - do the lab exercise for the student (may call setup)
#        reset   - avoid resetting a machine (not preferred)
#        (ONLY INCLUDE PROVIDED COMMANDS, REMOVE REST)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for the particular lab of awesomeness.
#
# CHANGELOG
#   * Tue Apr 19 2016 Adolfo Vazquez <avr@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
ssh='ssh -o StrictHostKeyChecking=no'
scp='scp -q'
target='workstation'
# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi

working_dir="/home/student/Ansible-Course"
ansible_inventory_file=inventory
ansible_playbook_file=samba.yml
ansible_user=devops
ansible_target=servera.lab.example.com
LOG=/dev/null

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup grade cleanup solve reset)

function lab_setup {
  lab_reset
  reqd_package='ansible'

  echo
  echo "Setting up ${target} for lab exercise work:"
  echo
  host_reachable ${target}


  if ! rpm -q --quiet ${reqd_package}
  then
    pad " . Installing ${reqd_package} package on ${target}"
    if yum -y install ansible &>/dev/null; then
        print_SUCCESS
    else
        print_FAIL
    fi
  fi
 pad " . Creating the working directory"
 mkdir -p ${working_dir}
 chown -R student. ${working_dir}
 print_SUCCESS

}

function lab_grade {

  echo
  echo "Grading the student's work on ${target}:"
  echo
  host_reachable ${target}

  # Overall grade
  echo
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  echo
}

function lab_cleanup {

  echo
  echo "Cleaning up the lab on ${target}:"
  echo
  host_reachable ${target}

  print_SUCCESS

}


function lab_solve {

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${target}:"
  echo

  print_SUCCESS

}

function lab_reset {

  echo
  echo "Resetting the lab on ${target}:"
  echo
  host_reachable ${target}

  print_SUCCESS

}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
