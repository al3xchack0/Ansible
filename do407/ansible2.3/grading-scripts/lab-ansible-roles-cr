#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-ansible-role-cr - script for DO407 Ansible practice
#
# SYNOPSIS
#     lab-ansible-role-cr {setup|grade|cleanup|reset}
#
#        setup   - copy templates to ~student on workstation
#        grade   - perform lab evaluation steps
#        cleanup - remove changes applied to serverb and tower hosts
#        reset   - same as cleanup 
#
# DESCRIPTION
#     This script is used to setup the lab environment for Comp Review
#     Sec-3.
#
# CHANGELOG
#   * Wed Jun 28 2017 Chen Chang <cchang@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
runuser='runuser student -c'

control_node='workstation.lab.example.com'
managed_nodes=( serverb.lab.example.com serverc.lab.example.com serverd.lab.example.com )

lab_dir="/home/student"
working_dir=${lab_dir}/ansible-roles-cr
role_dir=${lab_dir}/ansible-roles-cr/roles/ansible-vsftpd

declare -a valid_commands=(setup grade cleanup reset)

function lab_setup {
  reqd_package='ansible tree'

  print_header "Setting up ${control_node} for lab exercise work:"
  host_reachable ${control_node}

  for managed_node in "${managed_nodes[@]}"; do
    host_reachable ${managed_node}
  done
 
  if ! rpm -q --quiet ${reqd_package}
  then
    pad " . Installing required packages"
    if yum install -q -y ${reqd_package}; then
        print_SUCCESS
    else
        print_FAIL
    fi
  fi
  
  pad " . Creating the working directory"
  if install -d ${working_dir} -m 775 -o student -g student; then
      print_SUCCESS
  else
      print_FAIL
  fi

  print_line
}

function lab_grade {

  print_header "Grading the student's work on ${control_node}:"
  host_reachable ${control_node}
  print_line
  
  if ! host_reachable serverb || ! host_reachable serverc || ! host_reachable serverd; then 
     pad " . Ensure all managed host are reachable"
     print_FAIL
  fi

  # Check the Ansbile config file
  pad " . Verify the Ansible configuration file"
  if [ -e "${working_dir}/ansible.cfg" ]; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the Ansible remote user configuraton
  pad " . Verify the remote user configuration"
  cd ${working_dir}
  config_ru=$(ansible -h | grep 'connect as this user' | sed -e 's/^.*=//' -e 's/).*$//')
  if [ "${config_ru}" == 'devops' ]; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the Ansible become user configuraton
  pad " . Verify the become user configuration"
  cd ${working_dir}
  config_bu=$(ansible -h | grep 'desired sudo user' | sed -e 's/^.*=//' -e 's/).*$//')
  if [ "${config_bu}" == 'root' ]; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the Ansible become method configuraton
  pad " . Verify the become method configuration"
  cd ${working_dir}
  config_bm=$(ansible -h | grep 'privilege escalation method' | sed -e 's/^.*=//' -e 's/).*$//')
  if [ "${config_bm}" == 'sudo' ]; then
     print_PASS
  else
     print_FAIL
  fi

  # Very ftpservers inventory host group
  pad " . Verify the ftpservers inventory host group"
  cd ${working_dir}
  ftpservers=$(ansible ftpservers --list-host | sed '1d' | sort | xargs)
  if [ "${ftpservers}" == 'serverb.lab.example.com serverd.lab.example.com' ]; then
     print_PASS
  else
     print_FAIL
  fi

  # Very ftpclients inventory host group
  pad " . Verify the ftpclients inventory host group"
  cd ${working_dir}
  ftpclients=$(ansible ftpclients --list-host | sed '1d' | sort | xargs)
  if [ "${ftpclients}" == 'servera.lab.example.com serverc.lab.example.com' ]; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the ansible-vsftpd role
  pad " . Verify the ansible-vsftpd role exists"
  if [[ -d "${role_dir}" ]]; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the defaults/main.yml playbook file
  pad " . Verify the defaults/main.yml file exists"
  if [[ -f "${role_dir}/defaults/main.yml" ]]; then
     print_PASS
  else
     print_FAIL
  fi

  # Checking the defaults-template.yml file
  pad " . Verifying defaults-template.yml file"
  cd ${role_dir}
  if diff <(curl -s -o - http://materials.example.com/ansible-playbooks-cr/vars/defaults-template.yml) defaults/main.yml; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the vars/main.yml playbook file
  pad " . Verify the vars/main.yml file exists"
  if [[ -f "${role_dir}/vars/main.yml" ]]; then
     print_PASS
  else
     print_FAIL
  fi

  # Checking the vars/main.yml file
  pad " . Verifying vars/main.yml file"
  cd ${role_dir}
  if grep '^vsftpd_packages: *vsftpd *$' vars/main.yml && grep '^vsftpd_service: *vsftpd *$' vars/main.yml && grep '^vsftpd_config_file: */etc/vsftpd/vsftpd.conf *$' vars/main.yml; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the templates/vsftpd.conf.j2 playbook file
  pad " . Verify the templates/vsftpd.conf.j2 file exists"
  if [[ -f "${role_dir}/templates/vsftpd.conf.j2" ]]; then
     print_PASS
  else
     print_FAIL
  fi

  # Checking the Jinja2 template
  pad " . Verifying Jinja2 template"
  cd ${role_dir}
  if diff <(curl -s -o - http://materials.example.com/ansible-playbooks-cr/templates/vsftpd.conf.j2) templates/vsftpd.conf.j2; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the handlers/main.yml playbook file
  pad " . Verify the handlers/main.yml file exists"
  if [[ -f "${role_dir}/handlers/main.yml" ]]; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the role license type
  pad " . Checking the role license type"
  lic_type=$(awk '/license:/{print $2}' ${role_dir}/meta/main.yml)
  if [ "${lic_type}" == 'BSD' ]; then
     print_PASS
  else
     print_FAIL
  fi

  # Check unused role directories
  pad " . Verify unused role directories removed"
  if [[ -d "${role_dir}/tests" ]]; then
     print_FAIL
  else
     print_PASS
  fi

  # Check the vsftpd-configure.yml playbook file
  pad " . Verify the vsftpd-configure.yml file exists"
  if [[ -f "${working_dir}/vsftpd-configure.yml" ]]; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the syntax for vsftpd-configure.yml playbook file
  pad " . Checking the syntax for vsftpd-configure.yml playbook file"
  cd ${working_dir}
  if ansible-playbook --syntax-check ${working_dir}/vsftpd-configure.yml; then
     print_PASS
  else
     print_FAIL
  fi

  # Check the syntax for site.yml playbook file
  pad " . Checking the syntax for site.yml playbook file"
  cd ${working_dir}
  if ansible-playbook --syntax-check ${working_dir}/site.yml; then
     print_PASS
  else
     print_FAIL
  fi

  # Check for lftp package on servera
  pad " . Verify lftp package on servera"
  if ${ssh} servera "rpm -q --quiet lftp"; then
     print_PASS
  else
     print_FAIL
  fi

  # Check for lftp package on serverc
  pad " . Verify lftp package on serverc"
  if ${ssh} serverc "rpm -q --quiet lftp"; then
     print_PASS
  else
     print_FAIL
  fi
 
  # Check for vsftpd package on serverb
  pad " . Verifying the vsftpd package on serverb"
  if ${ssh} serverb "rpm -q --quiet vsftpd"; then
     print_PASS
  else
     print_FAIL
  fi

  # Check for vsftpd package on serverd
  pad " . Verifying the vsftpd package on serverd"
  if ${ssh} serverd "rpm -q --quiet vsftpd"; then
     print_PASS
  else
     print_FAIL
  fi

  # Check for vsftpd service on serverb
  pad " . Verifying the vsftpd service on serverb"
  if ${ssh} serverb "systemctl is-enabled vsftpd && systemctl is-active vsftpd"; then
     print_PASS
  else
     print_FAIL
  fi

  # Check for vsftpd service on serverd
  pad " . Verifying the vsftpd service on serverd"
  if ${ssh} serverd "systemctl is-enabled vsftpd && systemctl is-active vsftpd"; then
     print_PASS
  else
     print_FAIL
  fi

  # Check partition mount on serverb
  pad " . Verifying partition mount on serverb"
  if ${ssh} serverb "mount | grep '/dev/vdb1 on /mnt/share type xfs'"; then
     print_PASS
  else
     print_FAIL
  fi

  # Check partition mount on serverd
  pad " . Verifying partition mount on serverd"
  if ${ssh} serverd "mount | grep '/dev/vdb1 on /mnt/share type xfs'"; then
     print_PASS
  else
     print_FAIL
  fi

  # Check partition mount properties on serverb
  pad " . Verifying partition mount properties on serverb"
  if ${ssh} serverb "ls -ladZ /mnt/share | grep 'drwxr-xr-x. root root system_u:object_r:public_content_t:'"; then
     print_PASS
  else
     print_FAIL
  fi

  # Check partition mount properties on serverd
  pad " . Verifying partition mount properties on serverd"
  if ${ssh} serverd "ls -ladZ /mnt/share | grep 'drwxr-xr-x. root root system_u:object_r:public_content_t:'"; then
     print_PASS
  else
     print_FAIL
  fi

  # Check contents of README on serverb
  pad " . Verifying README content on serverb"
  ${ssh} serverb "grep 'Welcome to the FTP server at serverb.lab.example.com' /mnt/share/README"

  if [ $? -eq 0 ]; then
     print_PASS
  else
     print_FAIL
  fi

  # Check contents of README on serverd
  pad " . Verifying README content on serverd"
  ${ssh} serverd "grep 'Welcome to the FTP server at serverd.lab.example.com' /mnt/share/README"

  if [ $? -eq 0 ]; then
     print_PASS
  else
     print_FAIL
  fi

  # Check FTP service on serverb
  pad " . Verifying ftp transfer on serverb"
  ${ssh} serverc 'lftp -c "open -u anonymous,student@example.com serverb.lab.example.com; cd pub; get README"'

  if [ $? -eq 0 ]; then
     print_PASS
  else
     print_FAIL
  fi

  ${ssh} serverc 'rm /root/README'

  # Check FTP service on serverd
  pad " . Verifying ftp transfer on serverd"
  ${ssh} serverc 'lftp -c "open -u anonymous,student@example.com serverd.lab.example.com; cd pub; get README"'

  if [ $? -eq 0 ]; then
     print_PASS
  else
     print_FAIL
  fi

  ${ssh} serverc 'rm /root/README'

  # Overall grade
  print_line
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]; then
    print_PASS
  else
    print_FAIL
  fi  

  print_line
}

function lab_cleanup {
  
  print_header "Cleaning up the lab on ${control_node}:"

  if host_reachable servera && host_reachable serverb && host_reachable serverc && host_reachable serverd; then
    if ${ssh} servera "rpm -q --quiet lftp"; then
      pad " . Undoing playbook tasks on servera"
      ${ssh} servera "yum remove -y lftp"
      print_SUCCESS
    fi

    if ${ssh} serverc "rpm -q --quiet lftp"; then
      pad " . Undoing playbook tasks on serverc"
      ${ssh} serverc "yum remove -y lftp"
      print_SUCCESS
    fi

    if ${ssh} serverb "rpm -q --quiet vsftpd"; then
      pad " . Undoing playbook tasks on serverb"
      ${ssh} serverb "yum remove -y vsftpd"
      ${ssh} serverb "firewall-cmd --remove-service ftp --permanent; firewall-cmd --reload"
      print_SUCCESS
    fi

    if ${ssh} serverd "rpm -q --quiet vsftpd"; then
      pad " . Undoing playbook tasks on serverd"
      ${ssh} serverd "yum remove -y vsftpd"
      ${ssh} serverd "firewall-cmd --remove-service ftp --permanent; firewall-cmd --reload"
      print_SUCCESS
    fi

  else
    print_FAIL
  fi

  print_line
}

function lab_reset {

# lab_cleanup

  print_header "Resetting the lab on ${control_node}:"
  lab_cleanup

  print_header "Resetting the lab on ${control_node}:"
  pad " . Removing the directory from ${control_node}"
  rm -rf ${working_dir}
  print_SUCCESS

  print_line
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
