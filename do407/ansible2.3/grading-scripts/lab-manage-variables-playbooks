#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-managing-variables-playbook - grading script for DO407
#
# SYNOPSIS
#     lab-managing-variables-playbook {setup|grade|cleanup|solve|reset}
#
#        setup   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        solve   - do the lab exercise for the student (may call setup)
#        reset   - avoid resetting a machine (not preferred)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for the lab for managing playbooks variables.
#
# CHANGELOG
#   * Wed Jun 21 2017 Artur Glogowski <aglogows@redhat.com>
#   - modified become method for localhost and removed localhost from inventory
#   * Wed Jun  8 2016 Chen Chang <cchang@redhat.com>
#   - added localhost to inventory to avoid implicit localhost
#   * Mon May 16 2016 George Hacker <ghacker@redhat.com>
#   - playbook now checks web content from localhost
#   - removed loops from playbook
#   - lab_cleanup no longer removes the student's work
#   - lab_setup provides student work a working config and inventory
#   - changed pkg parameter for yum module to name
#   * Wed May 4 2016 Razique Mahroua <rmahroua@redhat.com>
#   - quickfix (cleaning up /var/www/html + changes package name)
#   * Wed Apr 13 2016 Razique Mahroua <rmahroua@redhat.com>
#   - quickfix to match the book
#   * Tue Mar 29 2016 Razique Mahroua <rmahroua@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'

control_node='workstation'

# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi

working_dir="/home/student/${env}-vars-playbook"
ansible_cfg_file=${working_dir}/ansible.cfg
ansible_hst_file=${working_dir}/inventory
ansible_playbook_file=${working_dir}/playbook.yml
ansible_user=devops
ansible_target=servera.lab.example.com
ansible_pkgs=(httpd firewalld python-httplib2)
ansible_pkgs2=(httpd python-httplib2)

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(setup grade cleanup solve reset)

function lab_setup {

  reqd_package='ansible'
  host_reachable ${control_node}
  print_line "Setting up ${control_node} for lab exercise work:"

  pad " · ${reqd_package} package is installed on ${control_node}"
  if ! rpm -q --quiet ${reqd_package}
  then
    print_FAIL
  else
    print_SUCCESS
    if [[ ! -d ${working_dir} ]]
    then
      pad " · Creating the working directory"
      mkdir -p ${working_dir}
      cat << EOF >> ${ansible_cfg_file}
[defaults]
inventory   = ${ansible_hst_file##*/}
remote_user = ${ansible_user}

[privilege_escalation]
become      = true
EOF
      cat << EOF >> ${ansible_hst_file}

[webserver]
${ansible_target}
EOF
      chown -R student. ${working_dir}
      print_SUCCESS
    fi
  fi

  echo
}

function lab_grade {

  host_reachable ${ansible_target}
  echo
  echo "Grading the student's work on ${control_node}:"
  echo

# pad " · Ensuring Ansible configuration file is present"
# if [[ -f  ${ansible_cfg_file} &>/dev/null; then
#   print_PASS
# else
#   print_FAIL
# fi
# pad " · Ensuring Ansible host file is present"
# if stat ${ansible_hst_file} &>/dev/null; then
#   print_PASS
# else
#   print_FAIL
# fi

  pad " · Ensuring Ansible playbook is present"
  if stat ${ansible_playbook_file} &>/dev/null; then
    print_PASS
  else
    print_FAIL
  fi

  pad " · Ensuring the web server is reachable"
  if curl -s -I http://${ansible_target} | grep -q 200; then
    print_PASS
  else
    print_FAIL
  fi

  echo
  echo "Grading the student's work on ${control_node}:"
  echo

  echo " · Checking packages"
  for i in "${ansible_pkgs[@]}"; do
    pad "   · Checking $i"
    if ${ssh} ${ansible_target} rpm -q "$i" &> /dev/null; then
      print_PASS
    else
      print_FAIL
    fi
  done

  echo " · Ensuring services are started"
  pad "   · Checking ${ansible_pkgs[0]}"
  if ${ssh} ${ansible_target} systemctl is-active ${ansible_pkgs[0]} &>/dev/null; then
    print_PASS
  else
    print_FAIL
  fi
  pad "   · Checking ${ansible_pkgs[1]}"
  if ${ssh} ${ansible_target} systemctl is-active ${ansible_pkgs[1]} &>/dev/null; then
    print_PASS
  else
    print_FAIL
  fi

  # Overall grade
  echo
  pad 'Overall lab grade'
  if [[ ${fail_count} -eq 0 ]]
  then
    print_PASS
  else
    print_FAIL
  fi

  echo
}

function lab_cleanup {

  host_reachable ${ansible_target}
  echo
  echo "Cleaning up the lab on ${ansible_target}:"
  echo

  echo " · Removing packages"
  for i in "${ansible_pkgs2[@]}"; do
    pad "   · Removing $i"
    if ${ssh} ${ansible_target} yum -y remove "$i" &>/dev/null; then
      print_SUCCESS
    else
      print_FAIL
    fi
  done
  pad " · Cleaning the web directory "
  if ${ssh} ${ansible_target} "rm -rf /var/www/html/*" &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}


function lab_solve {

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${control_node}:"
  echo

#  pad " · Creating ${ansible_cfg_file}"
#  cat > ${ansible_cfg_file} << EOF
#[defaults]
#inventory = ${ansible_hst_file}
#EOF
# if stat ${ansible_cfg_file} &>/dev/null; then
#    print_SUCCESS
#  else
#    print_FAIL
#  fi

#  pad " · Creating ${ansible_hst_file}"
#  cat > ${ansible_hst_file} << EOF
#[webserver]
#${ansible_target} ansible_user=devops ansible_become=yes
#EOF
#  if stat ${ansible_hst_file} &>/dev/null; then
#    print_SUCCESS
#  else
#    print_FAIL
#  fi

  pad " · Creating ${ansible_playbook_file}"
  cat > ${ansible_playbook_file} << EOF
---
- name: Installs Apache and start the service
  hosts: webserver
  vars:
    web_pkg: httpd
    firewall_pkg: firewalld
    web_service: httpd
    firewall_service: firewalld
    python_pkg: python-httplib2
    rule: http

  tasks:
    - name: Install the required packages
      yum:
        name:
          - "{{ web_pkg  }}"
          - "{{ firewall_pkg }}"
          - "{{ python_pkg }}"
        state: latest

    - name: Start and enable the {{ firewall_service }} service
      service:
        name: "{{ firewall_service }}"
        enabled: true
        state: started

    - name: Start and enable the {{ web_service }} service
      service:
        name: "{{ web_service }}"
        enabled: true
        state: started

    - name: Create web content to be served
      copy:
        content: "Example web content"
        dest: /var/www/html/index.html

    - name: Open the port for {{ rule }}
      firewalld:
        service: "{{ rule }}"
        permanent: true
        immediate: true
        state: enabled

- name: Verify the Apache service
  hosts: localhost
  become: false
  tasks:
    - name: Ensure the webserver is reachable
      uri:
        url: http://servera.lab.example.com
        status_code: 200
EOF
  if stat ${ansible_playbook_file} &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi

  chown -R student. ${working_dir}

  pad " · Running the playbook"
  cd ${working_dir}
  if ansible-playbook ${ansible_playbook_file##*/} &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

function lab_reset {

  lab_cleanup

  echo "Resetting the lab on ${control_node}:"
  echo

  pad " · Removing the working directory"
  if rm -rf ${working_dir}; then
    print_SUCCESS
  else
    print_FAIL
  fi

  echo
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
