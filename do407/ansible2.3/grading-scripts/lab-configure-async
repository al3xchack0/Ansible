#!/bin/bash
#
# Copyright 2016 Red Hat, Inc.
#
# NAME
#     lab-configure-async - grading script for DO407 awesome lab
#
# SYNOPSIS
#     lab-configure-async {setup|grade|cleanup|solve|reset}
#
#        setup   - prepare the system for starting the lab
#        grade   - perform evaluation steps on the system
#        cleanup - perform post-lab cleanup (not comprehensive like reset)
#        solve   - do the lab exercise for the student (may call setup)
#        reset   - avoid resetting a machine (not preferred)
#        (ONLY INCLUDE PROVIDED COMMANDS, REMOVE REST)
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, reset, or solve for lab-configure-async.
#
# CHANGELOG
#   * Tue Jun 20 2017 Artur Glogowski <aglogows@redhat.com>
#   - removed random print_SUCCESS from setup
#   - changed to run as root
#   * Mon Apr 19 2016 Snehangshu Karmakar <snehk@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'
runuser='runuser student -c'
ssh='ssh -o StrictHostKeyChecking=no'
scp='scp -q'
target='workstation'
# Conditional to make the script compatible with the
# demo version.
if [[ ${lab_demo_mode} == "demo" ]]; then
  env="demo"
else
  env="dev"
fi

lab_dir="/home/student"
working_dir=${lab_dir}/configure-async
ansible_cfg_file=${working_dir}/ansible.cfg
ansible_hst_file=${working_dir}/inventory/hosts
ansible_user=devops
ansible_target=servera.lab.example.com
#ansible_pkgs=(httpd firewalld python-httplib2)

# This defines which subcommands are supported (solve, reset, etc.).
# Corresponding lab_COMMAND functions must be defined.
#declare -a valid_commands=(setup grade cleanup solve reset)
declare -a valid_commands=(setup cleanup reset)

function lab_setup {
  reqd_package='ansible'

  echo
  echo "Setting up ${target} for lab exercise work:"
  echo
  host_reachable ${target}
  host_reachable ${ansible_target}


  if ! rpm -q --quiet ${reqd_package}
  then
    pad " . Installing Ansible"
    echo "student" | sudo -S yum install -y ${reqd_package} &>/dev/null
    print_SUCCESS
  fi

  pad " . Creating the working directory"
  ${runuser} "mkdir -p ${working_dir} &>/dev/null"
  ${runuser} "mkdir ${working_dir}/inventory &>/dev/null"
  ${runuser} "mkdir ${working_dir}/templates &>/dev/null"
  print_SUCCESS

  pad " . Creating Ansible configuration file"
  ${runuser} "cat > ${ansible_cfg_file} << EOF
[defaults]
inventory = ${ansible_hst_file}
EOF"
  if stat ${ansible_cfg_file} &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi  

  pad " . Creating host file"
  ${runuser} "cat > ${ansible_hst_file} << EOF
[webservers]
${ansible_target}
EOF"
  if stat ${ansible_hst_file} &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi  

}

function lab_grade {

  echo
  echo "Grading the student's work on ${target}:"
  echo
  host_reachable ${target}

}

function lab_cleanup {

  echo
  echo "Cleaning up the lab on ${target}:"
  echo
  host_reachable ${target}

  pad " . Removing file created on servera"
  if ${ssh} root@servera "rm -rf /tmp/*.file /usr/local/bin/longfiles"; then
    print_SUCCESS
  else
    print_FAIL
  fi

}


function lab_solve {

  lab_reset
  lab_setup

  echo
  echo "Solving the lab on ${target}:"
  echo
 
}

function lab_reset {

  echo
  echo "Resetting the lab on ${target}:"
  echo
  host_reachable ${target}

  pad " . Removing file created on servera"
  if ${ssh} root@servera "rm -rf /tmp/*.file /usr/local/bin/longfiles" &>/dev/null; then
    print_SUCCESS
  else
    print_FAIL
  fi
   
  pad " . Removing the working directory"
  if rm -rf ${working_dir}; then
    print_SUCCESS
  else
    print_FAIL
  fi
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
